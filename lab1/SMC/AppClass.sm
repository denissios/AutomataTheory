// -*- tab-width: 4; -*-

%{
//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
// 
// The Original Code is State Machine Compiler (SMC).
// 
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 - 2003 Charles W. Rapp.
// All Rights Reserved.
//
// Contributor(s): 
//
// State Map
//	This state map is recognizes the regular expression 0*1*.
//
// RCS ID
// $Id$
//
// CHANGE LOG
// $Log$
// Revision 1.5  2005/05/28 13:31:16  cwrapp
// Updated C++ examples.
//
// Revision 1.1  2005/02/21 14:19:18  charlesr
// Added spaces around header file name to test SMC.
//
// Revision 1.0  2003/12/14 19:11:57  charlesr
// Initial revision
//
%}

%start Map1::Start
%class AppClass
%header   AppClass.h

%map Map1
%%
// State		Transition									End State		Action(s)
Start
{
			letter_question(ch: char&)							Error			{}
			letter_equals(ch: char&)							Error			{}
			letter_colon(ch: char&)								Error			{}
			letter_at											Error			{}
			letter_point										Error			{}
			a_zAND0_9(ch: char&)								Error			{}
			a_z(ch: char&)										BS			    {reset();addBSSymbol(ch);}
			EOS													Start			{Unacceptable();}
}

BS
{
			letter_question(ch: char&)							BS				{addBSSymbol(ch);}
			letter_equals(ch: char&)							at				{addBSSymbol(ch);}
			letter_colon(ch: char&)								BS				{addBSSymbol(ch);}
			letter_at											Error			{}
			letter_point										Error			{}
			a_zAND0_9(ch: char&)								Error			{}
			a_z(ch: char&)										BS				{addBSSymbol(ch);}
			EOS													Start			{Unacceptable();}
}

at
{
			letter_question(ch: char&)							Error			{}
			letter_equals(ch: char&)							Error			{}
			letter_colon(ch: char&)								Error			{}
			letter_at											Error			{}
			letter_point										Error			{}
			a_zAND0_9(ch: char&)[ctxt.getBS().isCorrect()]		user			{}
			a_zAND0_9(ch: char&)								Error			{}
			a_z(ch: char&)[ctxt.getBS().isCorrect()]			user			{}
			a_z(ch: char&)										Error			{}
			EOS													Start			{Unacceptable();}
}

user
{
			letter_question(ch: char&)							Error			{}
			letter_equals(ch: char&)							Error			{}
			letter_colon(ch: char&)								Error			{}
			letter_at											point			{}
			letter_point										Error			{}
			a_zAND0_9(ch: char&)								user			{}
			a_z(ch: char&)										user			{}
			EOS													Start			{Unacceptable();}
}

point
{
			letter_question(ch: char&)							Error			{}
			letter_equals(ch: char&)							Error			{}
			letter_colon(ch: char&)								Error			{}
			letter_at											Error			{}
			letter_point										Error			{}
			a_zAND0_9(ch: char&)								server			{addServerSymbol(ch);}
			a_z(ch: char&)										server			{addServerSymbol(ch);}
			EOS													Start			{Unacceptable();}
}

server
{
			letter_question(ch: char&)							Error			{}
			letter_equals(ch: char&)							Error			{}
			letter_colon(ch: char&)								Error			{}
			letter_at											Error			{}
			letter_point										eos				{}
			a_zAND0_9(ch: char&)								server			{addServerSymbol(ch);}
			a_z(ch: char&)										server			{addServerSymbol(ch);}
			EOS													Start			{Unacceptable();}
}

eos
{
			letter_question(ch: char&)							Error			{}
			letter_equals(ch: char&)							Error			{}
			letter_colon(ch: char&)								Error			{}
			letter_at											Error			{}
			letter_point										Error			{}
			a_zAND0_9(ch: char&)								Error			{}
			a_z(ch: char&)										zone			{addZoneSymbol(ch);}
			EOS													Start			{Unacceptable();}
}

zone
{
			letter_question(ch: char&)							Error			{}
			letter_equals(ch: char&)							Error			{}
			letter_colon(ch: char&)								Error			{}
			letter_at											Error			{}
			letter_point										Error			{}
			a_zAND0_9(ch: char&)								Error			{}
			a_z(ch: char&) [ctxt.getZone().isCorrect()]			zone			{addZoneSymbol(ch);}
			a_z(ch: char&)										Error			{}
			EOS													Start			{Acceptable();}
}

OK
{}

Default
{
			other												Error			{}
			letter_space										Error			{}
			letter_tab											Error			{}
}

Error
{
			letter_question(ch: char&)							nil				{}
			letter_equals(ch: char&)							nil				{}
			letter_colon(ch: char&)								nil				{}
			letter_at											nil				{}
			letter_point										nil				{}
			a_zAND0_9(ch: char&)								nil				{}
			a_z(ch: char&)										nil				{}
			EOS													Start			{Unacceptable();}
}

%%
