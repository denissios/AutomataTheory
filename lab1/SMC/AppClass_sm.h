//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : AppClass.sm
//

#ifndef APPCLASS_SM_H
#define APPCLASS_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class Map1;
class Map1_Start;
class Map1_BS;
class Map1_at;
class Map1_user;
class Map1_point;
class Map1_server;
class Map1_eos;
class Map1_zone;
class Map1_OK;
class Map1_Error;
class Map1_Default;
class AppClassState;
class AppClassContext;
class AppClass;

class AppClassState :
    public statemap::State
{
public:

    AppClassState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(AppClassContext&) {};
    virtual void Exit(AppClassContext&) {};

    virtual void EOS(AppClassContext& context);
    virtual void a_z(AppClassContext& context, char& ch);
    virtual void a_zAND0_9(AppClassContext& context, char& ch);
    virtual void letter_at(AppClassContext& context);
    virtual void letter_colon(AppClassContext& context, char& ch);
    virtual void letter_equals(AppClassContext& context, char& ch);
    virtual void letter_point(AppClassContext& context);
    virtual void letter_question(AppClassContext& context, char& ch);
    virtual void letter_space(AppClassContext& context);
    virtual void letter_tab(AppClassContext& context);
    virtual void other(AppClassContext& context);

protected:

    virtual void Default(AppClassContext& context);
};

class Map1
{
public:

    static Map1_Start Start;
    static Map1_BS BS;
    static Map1_at at;
    static Map1_user user;
    static Map1_point point;
    static Map1_server server;
    static Map1_eos eos;
    static Map1_zone zone;
    static Map1_OK OK;
    static Map1_Error Error;
};

class Map1_Default :
    public AppClassState
{
public:

    Map1_Default(const char * const name, const int stateId)
    : AppClassState(name, stateId)
    {};

    virtual void other(AppClassContext& context);
    virtual void letter_space(AppClassContext& context);
    virtual void letter_tab(AppClassContext& context);
};

class Map1_Start :
    public Map1_Default
{
public:
    Map1_Start(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void EOS(AppClassContext& context);
    virtual void a_z(AppClassContext& context, char& ch);
    virtual void a_zAND0_9(AppClassContext& context, char& ch);
    virtual void letter_at(AppClassContext& context);
    virtual void letter_colon(AppClassContext& context, char& ch);
    virtual void letter_equals(AppClassContext& context, char& ch);
    virtual void letter_point(AppClassContext& context);
    virtual void letter_question(AppClassContext& context, char& ch);
};

class Map1_BS :
    public Map1_Default
{
public:
    Map1_BS(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void EOS(AppClassContext& context);
    virtual void a_z(AppClassContext& context, char& ch);
    virtual void a_zAND0_9(AppClassContext& context, char& ch);
    virtual void letter_at(AppClassContext& context);
    virtual void letter_colon(AppClassContext& context, char& ch);
    virtual void letter_equals(AppClassContext& context, char& ch);
    virtual void letter_point(AppClassContext& context);
    virtual void letter_question(AppClassContext& context, char& ch);
};

class Map1_at :
    public Map1_Default
{
public:
    Map1_at(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void EOS(AppClassContext& context);
    virtual void a_z(AppClassContext& context, char& ch);
    virtual void a_zAND0_9(AppClassContext& context, char& ch);
    virtual void letter_at(AppClassContext& context);
    virtual void letter_colon(AppClassContext& context, char& ch);
    virtual void letter_equals(AppClassContext& context, char& ch);
    virtual void letter_point(AppClassContext& context);
    virtual void letter_question(AppClassContext& context, char& ch);
};

class Map1_user :
    public Map1_Default
{
public:
    Map1_user(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void EOS(AppClassContext& context);
    virtual void a_z(AppClassContext& context, char& ch);
    virtual void a_zAND0_9(AppClassContext& context, char& ch);
    virtual void letter_at(AppClassContext& context);
    virtual void letter_colon(AppClassContext& context, char& ch);
    virtual void letter_equals(AppClassContext& context, char& ch);
    virtual void letter_point(AppClassContext& context);
    virtual void letter_question(AppClassContext& context, char& ch);
};

class Map1_point :
    public Map1_Default
{
public:
    Map1_point(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void EOS(AppClassContext& context);
    virtual void a_z(AppClassContext& context, char& ch);
    virtual void a_zAND0_9(AppClassContext& context, char& ch);
    virtual void letter_at(AppClassContext& context);
    virtual void letter_colon(AppClassContext& context, char& ch);
    virtual void letter_equals(AppClassContext& context, char& ch);
    virtual void letter_point(AppClassContext& context);
    virtual void letter_question(AppClassContext& context, char& ch);
};

class Map1_server :
    public Map1_Default
{
public:
    Map1_server(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void EOS(AppClassContext& context);
    virtual void a_z(AppClassContext& context, char& ch);
    virtual void a_zAND0_9(AppClassContext& context, char& ch);
    virtual void letter_at(AppClassContext& context);
    virtual void letter_colon(AppClassContext& context, char& ch);
    virtual void letter_equals(AppClassContext& context, char& ch);
    virtual void letter_point(AppClassContext& context);
    virtual void letter_question(AppClassContext& context, char& ch);
};

class Map1_eos :
    public Map1_Default
{
public:
    Map1_eos(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void EOS(AppClassContext& context);
    virtual void a_z(AppClassContext& context, char& ch);
    virtual void a_zAND0_9(AppClassContext& context, char& ch);
    virtual void letter_at(AppClassContext& context);
    virtual void letter_colon(AppClassContext& context, char& ch);
    virtual void letter_equals(AppClassContext& context, char& ch);
    virtual void letter_point(AppClassContext& context);
    virtual void letter_question(AppClassContext& context, char& ch);
};

class Map1_zone :
    public Map1_Default
{
public:
    Map1_zone(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void EOS(AppClassContext& context);
    virtual void a_z(AppClassContext& context, char& ch);
    virtual void a_zAND0_9(AppClassContext& context, char& ch);
    virtual void letter_at(AppClassContext& context);
    virtual void letter_colon(AppClassContext& context, char& ch);
    virtual void letter_equals(AppClassContext& context, char& ch);
    virtual void letter_point(AppClassContext& context);
    virtual void letter_question(AppClassContext& context, char& ch);
};

class Map1_OK :
    public Map1_Default
{
public:
    Map1_OK(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

};

class Map1_Error :
    public Map1_Default
{
public:
    Map1_Error(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void EOS(AppClassContext& context);
    virtual void a_z(AppClassContext& context, char& ch);
    virtual void a_zAND0_9(AppClassContext& context, char& ch);
    virtual void letter_at(AppClassContext& context);
    virtual void letter_colon(AppClassContext& context, char& ch);
    virtual void letter_equals(AppClassContext& context, char& ch);
    virtual void letter_point(AppClassContext& context);
    virtual void letter_question(AppClassContext& context, char& ch);
};

class AppClassContext :
    public statemap::FSMContext
{
public:

    explicit AppClassContext(AppClass& owner)
    : FSMContext(Map1::Start),
      _owner(owner)
    {};

    AppClassContext(AppClass& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline AppClass& getOwner()
    {
        return (_owner);
    };

    inline AppClassState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<AppClassState&>(*_state);
    };

    inline void EOS()
    {
        getState().EOS(*this);
    };

    inline void a_z(char& ch)
    {
        getState().a_z(*this, ch);
    };

    inline void a_zAND0_9(char& ch)
    {
        getState().a_zAND0_9(*this, ch);
    };

    inline void letter_at()
    {
        getState().letter_at(*this);
    };

    inline void letter_colon(char& ch)
    {
        getState().letter_colon(*this, ch);
    };

    inline void letter_equals(char& ch)
    {
        getState().letter_equals(*this, ch);
    };

    inline void letter_point()
    {
        getState().letter_point(*this);
    };

    inline void letter_question(char& ch)
    {
        getState().letter_question(*this, ch);
    };

    inline void letter_space()
    {
        getState().letter_space(*this);
    };

    inline void letter_tab()
    {
        getState().letter_tab(*this);
    };

    inline void other()
    {
        getState().other(*this);
    };

private:
    AppClass& _owner;
};


#endif // APPCLASS_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
